// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: NextVideo/protos/nextgenvideosvc.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Com.Hrm123.Nextgenvideo {
  public static partial class NextGenVideoService
  {
    static readonly string __ServiceName = "com.hrm123.nextgenvideo.NextGenVideoService";

    static readonly grpc::Marshaller<global::Com.Hrm123.Nextgenvideo.Chunk> __Marshaller_com_hrm123_nextgenvideo_Chunk = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Hrm123.Nextgenvideo.Chunk.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Com.Hrm123.Nextgenvideo.SvcResponse> __Marshaller_com_hrm123_nextgenvideo_SvcResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Hrm123.Nextgenvideo.SvcResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Com.Hrm123.Nextgenvideo.FileReq> __Marshaller_com_hrm123_nextgenvideo_FileReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Hrm123.Nextgenvideo.FileReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Com.Hrm123.Nextgenvideo.FileListReq> __Marshaller_com_hrm123_nextgenvideo_FileListReq = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Hrm123.Nextgenvideo.FileListReq.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Com.Hrm123.Nextgenvideo.FileListResp> __Marshaller_com_hrm123_nextgenvideo_FileListResp = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Hrm123.Nextgenvideo.FileListResp.Parser.ParseFrom);

    static readonly grpc::Method<global::Com.Hrm123.Nextgenvideo.Chunk, global::Com.Hrm123.Nextgenvideo.SvcResponse> __Method_SaveMp4File = new grpc::Method<global::Com.Hrm123.Nextgenvideo.Chunk, global::Com.Hrm123.Nextgenvideo.SvcResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "SaveMp4File",
        __Marshaller_com_hrm123_nextgenvideo_Chunk,
        __Marshaller_com_hrm123_nextgenvideo_SvcResponse);

    static readonly grpc::Method<global::Com.Hrm123.Nextgenvideo.FileReq, global::Com.Hrm123.Nextgenvideo.Chunk> __Method_GetFile = new grpc::Method<global::Com.Hrm123.Nextgenvideo.FileReq, global::Com.Hrm123.Nextgenvideo.Chunk>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetFile",
        __Marshaller_com_hrm123_nextgenvideo_FileReq,
        __Marshaller_com_hrm123_nextgenvideo_Chunk);

    static readonly grpc::Method<global::Com.Hrm123.Nextgenvideo.FileListReq, global::Com.Hrm123.Nextgenvideo.FileListResp> __Method_ListFiles = new grpc::Method<global::Com.Hrm123.Nextgenvideo.FileListReq, global::Com.Hrm123.Nextgenvideo.FileListResp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListFiles",
        __Marshaller_com_hrm123_nextgenvideo_FileListReq,
        __Marshaller_com_hrm123_nextgenvideo_FileListResp);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Com.Hrm123.Nextgenvideo.NextgenvideosvcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of NextGenVideoService</summary>
    [grpc::BindServiceMethod(typeof(NextGenVideoService), "BindService")]
    public abstract partial class NextGenVideoServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Com.Hrm123.Nextgenvideo.SvcResponse> SaveMp4File(grpc::IAsyncStreamReader<global::Com.Hrm123.Nextgenvideo.Chunk> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetFile(global::Com.Hrm123.Nextgenvideo.FileReq request, grpc::IServerStreamWriter<global::Com.Hrm123.Nextgenvideo.Chunk> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Com.Hrm123.Nextgenvideo.FileListResp> ListFiles(global::Com.Hrm123.Nextgenvideo.FileListReq request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for NextGenVideoService</summary>
    public partial class NextGenVideoServiceClient : grpc::ClientBase<NextGenVideoServiceClient>
    {
      /// <summary>Creates a new client for NextGenVideoService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public NextGenVideoServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for NextGenVideoService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public NextGenVideoServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected NextGenVideoServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected NextGenVideoServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncClientStreamingCall<global::Com.Hrm123.Nextgenvideo.Chunk, global::Com.Hrm123.Nextgenvideo.SvcResponse> SaveMp4File(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SaveMp4File(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::Com.Hrm123.Nextgenvideo.Chunk, global::Com.Hrm123.Nextgenvideo.SvcResponse> SaveMp4File(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_SaveMp4File, null, options);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Com.Hrm123.Nextgenvideo.Chunk> GetFile(global::Com.Hrm123.Nextgenvideo.FileReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFile(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Com.Hrm123.Nextgenvideo.Chunk> GetFile(global::Com.Hrm123.Nextgenvideo.FileReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetFile, null, options, request);
      }
      public virtual global::Com.Hrm123.Nextgenvideo.FileListResp ListFiles(global::Com.Hrm123.Nextgenvideo.FileListReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListFiles(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Com.Hrm123.Nextgenvideo.FileListResp ListFiles(global::Com.Hrm123.Nextgenvideo.FileListReq request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListFiles, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Com.Hrm123.Nextgenvideo.FileListResp> ListFilesAsync(global::Com.Hrm123.Nextgenvideo.FileListReq request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListFilesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Com.Hrm123.Nextgenvideo.FileListResp> ListFilesAsync(global::Com.Hrm123.Nextgenvideo.FileListReq request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListFiles, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override NextGenVideoServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new NextGenVideoServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(NextGenVideoServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SaveMp4File, serviceImpl.SaveMp4File)
          .AddMethod(__Method_GetFile, serviceImpl.GetFile)
          .AddMethod(__Method_ListFiles, serviceImpl.ListFiles).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, NextGenVideoServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SaveMp4File, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::Com.Hrm123.Nextgenvideo.Chunk, global::Com.Hrm123.Nextgenvideo.SvcResponse>(serviceImpl.SaveMp4File));
      serviceBinder.AddMethod(__Method_GetFile, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Com.Hrm123.Nextgenvideo.FileReq, global::Com.Hrm123.Nextgenvideo.Chunk>(serviceImpl.GetFile));
      serviceBinder.AddMethod(__Method_ListFiles, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Com.Hrm123.Nextgenvideo.FileListReq, global::Com.Hrm123.Nextgenvideo.FileListResp>(serviceImpl.ListFiles));
    }

  }
}
#endregion
